#!/bin/bash
set -e

MID_HOME="/opt/snc_mid_server/agent"
CONF_FILE="${MID_HOME}/config.xml"
WRAPPER_CONF_FILE="${MID_HOME}/conf/wrapper-override.conf"

# Mandatory ENV
MID_INSTANCE_URL=${MID_INSTANCE_URL:-}
MID_INSTANCE_USERNAME=${MID_INSTANCE_USERNAME:-}
MID_INSTANCE_PASSWORD=${MID_INSTANCE_PASSWORD:-}
MID_SERVER_NAME=${MID_SERVER_NAME:-}

if [[ -n "$MID_K8S_MOD" ]]; then
  MID_SUFFIX=$(cat /proc/sys/kernel/random/uuid | cut -c29-36)
  MID_SERVER_NAME=${HOSTNAME}-${MID_SUFFIX}
  echo "DOCKER: K8S Mode is enabled, MID name is constructed with random suffix"
fi

# Secret
MID_SECRETS_FILE=${MID_SECRETS_FILE:-}

# Container Deploymane Name
MID_CONTAINER_DEPLOYMENT_NAME=${MID_CONTAINER_DEPLOYMENT_NAME:-}

# Deployment Mid SysId
DEPLOYMENT_MID_ID=${DEPLOYMENT_MID_ID:-}

# Operational ENV
MID_PROXY_HOST=${MID_PROXY_HOST:-}
MID_PROXY_PORT=${MID_PROXY_PORT:-}
MID_PROXY_USERNAME=${MID_PROXY_USERNAME:-}
MID_PROXY_PASSWORD=${MID_PROXY_PASSWORD:-}
MID_MUTUAL_AUTH_PEM_FILE=${MID_MUTUAL_AUTH_PEM_FILE:-}

EXIT_CODE_NORMAL_SHUTDOWN=0
EXIT_CODE_DOWNLOAD_FAILURE=1
EXIT_CODE_MISSING_CONFIG_PARAM=2
EXIT_CODE_MUTUAL_AUTH_SETUP_FAILURE=3

# Flag to indicate if mutual auth is used
IS_MUTUAL_AUTH=0

# File to track setup completion
MID_INITIALIZED_FILE="${MID_HOME}/.initialized"

restoreConfig () {
  RETURN_VAL=1
  if [ -e /midconfig/config.xml ]
  then 
    echo "DOCKER: Previous /midconfig/config.xml found"
    CURRENT_TIME=`date +%s`
    BACKUP_TIME=`cat /midconfig/backup_time.txt`
    TIME_DIFF=$(($CURRENT_TIME - $BACKUP_TIME))
    if [ $TIME_DIFF -le 180 ]; then
      echo "DOCKER: Restoring saved configuration"
      \cp /midconfig/config.xml /opt/snc_mid_server/agent
      \cp /midconfig/wrapper-override.conf /opt/snc_mid_server/agent/conf/wrapper-override.conf
      mkdir /opt/snc_mid_server/agent/security
      \cp /midconfig/agent_keystore /opt/snc_mid_server/agent/security/agent_keystore
      \cp /midconfig/jrelibsecurity/* /opt/snc_mid_server/agent/jre/lib/security 
      RETURN_VAL=0
    else
      echo "DOCKER: Difference between backup time and restore time is greater than 180 seconds. Will not restore saved configuration. Diff is: " $TIME_DIFF
    fi

    rm /midconfig/config.xml
    rm /midconfig/agent_keystore
    rm /midconfig/jrelibsecurity/*
  else
    echo "DOCKER: No previous /midconfig/config.xml"
  fi
  return $RETURN_VAL
}


generateConfigXml () {
  echo "DOCKER: setting up config.xml"
  if restoreConfig
  then 
    echo "DOCKER: Restored saved configuration"
    return
  else
    echo "DOCKER: Not restoring config. Starting fresh MID"
  fi
  
  # For Rome compatibility we add the following parameters as defaults.
  # Mandatory config
  replaceConfigParameter 1 url ${MID_INSTANCE_URL}
  replaceConfigParameter 1 name ${MID_SERVER_NAME}

  # Optional config
  # Proxy related
  # These parameters require a value because they are bootstrapped
  replaceConfigParameter 1 mid.proxy.host ${MID_PROXY_HOST}
  replaceConfigParameter 1 mid.proxy.port ${MID_PROXY_PORT}
  replaceConfigParameter 1 mid.proxy.username ${MID_PROXY_USERNAME}
  replaceConfigParameter 1 mid.proxy.password ${MID_PROXY_PASSWORD}

  # Handle generic config parameters from MID server profile
  envConfigRegex="MID_CONFIG_(.*)=(.*)"
  declare -A envVars
  getEnvVars $envConfigRegex $envVars

  for param in "${!envVars[@]}"
  do
    # not sure why the associative array contains an element with the key "0". Remove it for now.
    # I'll try to figure it out and clean this up.
    if [[ $param == "0" ]]
    then
      continue;
    fi
    if [[ -n $param ]]
    then
      echo "DOCKER: updating profile parameter: $param"
      replaceConfigParameter 0 $param ${envVars[$param]}
    fi
  done

  # Fill in $MID_CONTAINER_DEPLOYMENT_NAME in .container
  sed -i "s/ContainerDeploymentName=.*/ContainerDeploymentName=${MID_CONTAINER_DEPLOYMENT_NAME}/g" .container 
  
  # Fill in $DEPLOYMENT_MID_ID in .container
  sed -i "s/DeploymentMidId=.*/DeploymentMidId=${DEPLOYMENT_MID_ID}/g" .container 
    

  # Handle secrets file. Secrets file has priority over default and generic prarams
  if [[ ! -z "$MID_SECRETS_FILE" && -f "$MID_SECRETS_FILE" ]]
  then
    echo "DOCKER: processing secrets file"
    propRegex="^(.*)=(.*)$"
    while read line
    do 
      if [[ $line =~ $propRegex ]]
      then
        name=${BASH_REMATCH[1]}
        value=${BASH_REMATCH[2]}
        replaceConfigParameter 0 $name $value
      fi
    done < $MID_SECRETS_FILE
  fi

  if [[ ! -z "$MID_MUTUAL_AUTH_PEM_FILE" && -f "$MID_MUTUAL_AUTH_PEM_FILE" ]]
  then
    # If Cert (PEM) file is set and exists, proceed with mutual auth
    echo "DOCKER: mutual auth cert file found: $MID_MUTUAL_AUTH_PEM_FILE"
    if [[ ! -d /home/mid ]]; then
        mkdir -p /home/mid
    fi
    # Ensure log file exists for logger in java classes
    touch /home/mid/java0.log

    cd /opt/snc_mid_server/agent && \
      sh bin/scripts/manage-certificates.sh -a "DefaultSecurityKeyPairHandle" $MID_MUTUAL_AUTH_PEM_FILE

    if [[ $? != 0 ]]
    then
      echo "DOCKER: Error adding certificate. Please ensure PEM file is valid. Abandoning setup."
      exit $EXIT_CODE_MUTUAL_AUTH_SETUP_FAILURE
    fi

    cd /opt/snc_mid_server/agent && \
      sh bin/scripts/manage-certificates.sh -m

    if [[ $? != 0 ]]
    then
      echo "DOCKER: Error enabling mutual auth. Please ensure config.xml can be modified. Abandoning setup."
      exit $EXIT_CODE_MUTUAL_AUTH_SETUP_FAILURE
    fi

    IS_MUTUAL_AUTH=1
    echo "DOCKER: mutual auth enabled on MID"
  else
    # mutual auth is not set, proceed with basic authentication
    echo "DOCKER: mutual auth cert file not found: $MID_MUTUAL_AUTH_PEM_FILE" 
    replaceConfigParameter 1 mid.instance.username ${MID_INSTANCE_USERNAME}
    replaceConfigParameter 1 mid.instance.password ${MID_INSTANCE_PASSWORD}
  fi

  # Verify that mandatory parameters have been added
  validateMandatoryParameters

  echo "DOCKER: Update configuration DONE"
}

updateWrapperConfFromEnvVars() {

  echo "DOCKER: setting up wrapper-override.conf"

  envVarWrapperConfRegex="^MID_WRAPPER_(.*)=(.*)$"
  wrapperConfRegex="^#?(.*)=(.*)$"

  declare -A envVars
  getEnvVars $envVarWrapperConfRegex $envVars

  updatedFileContent=""

  # Iterate each line of wrapper file, concat updated lines to memory, then write final string back to file
  while read line
  do
    # If file line is a property attempt to update it with env variable value
    if [[ $line =~ $wrapperConfRegex ]]
    then
      name=${BASH_REMATCH[1]}
      value=${BASH_REMATCH[2]}
      newValue=${envVars[$name]}
      newLine=""

      # If property exists in env vars then update with new value
      if [[ -n $newValue ]]
      then
        newLine="${name}=${newValue}"
        # remove so envvars contains only variables that still need to be written to file"
        unset -v 'envVars['$name']'
      else
        newLine=$line
      fi
      updatedFileContent="${updatedFileContent}$newLine\n"

    # If line isn't a property just write it back to file without modification
    else
      updatedFileContent="${updatedFileContent}$line\n"
    fi
  done < ${WRAPPER_CONF_FILE}

  # envVars may contain additional variables whose name isn't already contained in wrapper-override.conf
  # For example, java.wrapper.additional.1 is a name found in wrapper-override.conf and would have
  # already been updated in the previous loop.
  # java.wrapper.additional.10 is not found in wrapper-override.conf and so would be added here.
  for prop in "${!envVars[@]}"
  do
    if [[ $prop == "0" ]]
    then
      continue
    fi
    if [[ -n $prop ]]
    then
      newLine="${prop}=${envVars[$prop]}"
      updatedFileContent="${updatedFileContent}$newLine\n"
    fi
  done

  # Write back to file
  printf "$updatedFileContent" > ${WRAPPER_CONF_FILE}
}

getEnvVars() {
  regex=$1
  envVars=$2

  for var in $(printenv)
  do
    if [[ $var =~ $regex ]]
    then
      name=${BASH_REMATCH[1]}
      value=${BASH_REMATCH[2]}
      # Bash environment variable names can only contain alpha-numeric characeters and the underscore
      # and as such, the period (.) is an offending character and has been remapped to 
      # two consecutive underscores (__).
      # example: mid.log.level is stored as mid__log__level
      # The following line restores the original name
      name=${name//"__"/"."}
      envVars[$name]=$value
    fi
  done
}

replaceConfigParameter() {
  requiresValue=$1
  name=$2
  val=$3

  # disallow any empty value for bootstrap parameters, e.g. url, proxy params
  if [[ $requiresValue == 1 && -z $val ]]
  then
    echo "DOCKER: Parameter $name has no value and will not be added to $CONF_FILE"
    return 0
  fi

  #Handle existing parameters
  if [[ `xmlstarlet sel -t -v "/parameters/parameter/@name='$name'" $CONF_FILE` == "true" ]]
  then
    echo "DOCKER: Updating parameter $name in file: $CONF_FILE"
    /bin/xmlstarlet edit --inplace --update "/parameters/parameter[@name='$name']/@value" --value "$val" $CONF_FILE
  else
    # Handle optional parameters
    echo "DOCKER: Adding parameter $name to file: $CONF_FILE"
    sed -i "s|</parameters>|  <parameter name=\"${name}\" value=\"${val}\"/>\n\n</parameters>|g" $CONF_FILE
  fi
}

validateMandatoryParameters() {
  echo "DOCKER: validating mandatory parameters"

  # These default values are taken from the config.xml ootb.
  # If these values change in the future, those changes should be made here as well.
  validateMandatoryParameter "url" "https://YOUR_INSTANCE.service-now.com/" 0 
  validateMandatoryParameter "name" "YOUR_MIDSERVER_NAME_GOES_HERE" 0
  validateMandatoryParameter "mid.instance.username" "YOUR_INSTANCE_USER_NAME_HERE" $IS_MUTUAL_AUTH
  validateMandatoryParameter "mid.instance.password" "YOUR_INSTANCE_PASSWORD_HERE" $IS_MUTUAL_AUTH
}

validateMandatoryParameter() {
  name=$1
  defaultValue=$2
  checkNotPresent=$3

  echo "DOCKER: Validating parameter: '$name'"

  validationPath="//parameters/parameter/@name='$name'"
  elementPath="//parameters/parameter[@name='$name']"

  if [[ `xmlstarlet sel -t -v $validationPath $CONF_FILE` == "true" ]]
  then
    xmlParam=`xmlstarlet sel -t -c ${elementPath} $CONF_FILE`
    # If mutual auth is enabled we shouldn't have a username or pw in config.xml   
    if [[ $checkNotPresent == 1 ]]
    then
      echo "DOCKER: Found parameter '$name' in config.xml but not expected."
      echo "        This could be caused by mutual authentication setup failure. Abandoning setup."
      exit $EXIT_CODE_MUTUAL_AUTH_SETUP_FAILURE
    fi
    valueRegex="^.* value=\"(.*)\".*$"
    if [[ $xmlParam =~ $valueRegex && ( ${BASH_REMATCH[1]} == $defaultValue || ${BASH_REMATCH[1]} == "" ) ]]
    then
      echo "DOCKER: Parameter '$name' failed to update in config.xml."
      echo "        Please verify that the '$name' parameter has been supplied. Abandoning setup."
      exit $EXIT_CODE_MISSING_CONFIG_PARAM
    fi
  elif [[ $checkNotPresent == 0 ]]
  then
    echo "DOCKER: Mandatory parameter '$name' expected but not found in config.xml."
    echo "        Please verify that a value has been given for '$name'. Abandoning setup."
    exit $EXIT_CODE_MISSING_CONFIG_PARAM
  fi
}

# max wait time for initialization
MAX_INIT_WAIT_TIME=60

midStart () {

  touch /opt/snc_mid_server/agent/logs/agent0.log.0

  echo "DOCKER: starting mid server"

  /opt/snc_mid_server/agent/bin/mid.sh start &

  # CLI does not fully spawned and need a wait until the process generated. Not having the wait would make container
  # to exit immediately.
  waitTime=0
  while [ ! -f /opt/snc_mid_server/agent/work/mid.pid ] && [ "$waitTime" -lt "$MAX_INIT_WAIT_TIME" ]
  do
    sleep 5
    waitTime=$(( $waitTime + 5 ))
    echo "DOCKER: Mid wrapper init taking $waitTime sec .."
  done

  wrapper_pid=$(cat /opt/snc_mid_server/agent/work/mid.pid)

  # In addition, we rely on CLI execution to restart MID service which should not exit the container either.
  # We would need a way to keep container alive
  while true
  do
      tail -F /opt/snc_mid_server/agent/logs/agent0.log.0 & wait ${!}
  done

}

_handleSignal_SIGTERM() {
  echo "DOCKER: Received signal SIGTERM, gracefully shut down mid before exiting..."
  /opt/snc_mid_server/agent/bin/mid.sh stop

  exit $EXIT_CODE_NORMAL_SHUTDOWN
}

midStop () {
  echo "DOCKER: stopping mid server"

  /opt/snc_mid_server/agent/bin/mid.sh stop
}

midRestart () {
  echo "DOCKER: restarting mid server"

  /opt/snc_mid_server/agent/bin/mid.sh restart
}

midSetup () {
  flag=$1

  if [[ ! -f $MID_INITIALIZED_FILE  || $flag == "-f" ]]
  then
    generateConfigXml
    updateWrapperConfFromEnvVars
    touch $MID_INITIALIZED_FILE
    date > $MID_INITIALIZED_FILE
  fi
}

midHelp () {
  echo "Available options:"
  echo " start          - Starts the mid server (default)"
  echo " restart        - Restarts the mid server"
  echo " setup          - Generate config.xml and java wrapper overrides"
  echo " help           - Displays the help"
  echo " [command]          - Execute the specified linux command eg. bash."
}

# SIGTERM (15) : software termination signal - typically sent docker stop or by kill by default
trap '_handleSignal_SIGTERM' SIGTERM

case "$1" in
  start)
    midSetup
    midStart
    ;;
  setup)
    midSetup -f
    ;;
  stop)
    midStop
    ;;
  restart)
    midRestart
    ;;
  help)
    midHelp
    ;;
  *)
    midHelp
    ;;
esac

